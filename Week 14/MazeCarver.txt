package mazecarve;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Random;
import javax.imageio.ImageIO;

enum Direction{
    N,E,S,W
}

public class MazeCarve {
    static Random R = new Random();
    
    static void carve(boolean[][] M, int x, int y, Direction from){
        //System.out.println("carve "+x+" "+y);
        if( x < 0 || x >= M[0].length || y < 0 || y >= M.length )
            return;
        
        //if( M[y][x] )
        //    return;
        
        boolean Nopen = (y>0 && M[y-1][x]);
        boolean Sopen = (y<M.length-1 && M[y+1][x]);
        boolean Wopen = (x>0 && M[y][x-1]);
        boolean Eopen = (x<M[0].length-1 && M[y][x+1]);
        
        switch(from){
            case N:
                if( !Sopen && !Eopen && !Wopen )
                    M[y][x]=true;
                break;
            case S:
                if( !Nopen && !Eopen && !Wopen )
                    M[y][x]=true;
                break;
            case E:
                if( !Sopen && !Nopen && !Wopen )
                    M[y][x]=true;
                break;
             case W:
                if( !Sopen && !Eopen && !Nopen )
                    M[y][x]=true;
                break;
        }
        
        if(!M[y][x])
            return;
        
        Direction[] A = new Direction[]{
            Direction.N, Direction.E, Direction.S, Direction.W
        };
        for(int i=0;i<4;++i){
            int j = R.nextInt(4);
            Direction tmp = A[i];
            A[i]=A[j];
            A[j]=tmp;
        }
        
        for(int i=0;i<4;++i){
            if( A[i] == from )
                continue;
            switch(A[i]){
                case W: //go west
                    carve(M,x-1,y,Direction.E);
                    break;
                case E:
                    carve(M,x+1,y,Direction.W);
                    break;
                case N:
                    carve(M,x,y-1,Direction.S);
                    break;
                case S:
                    carve(M,x,y+1,Direction.N);
                    break;
            }
        }
    }
    public static void main(String[] args) throws Exception {
        boolean[][] M = new boolean[20][20];
        carve(M,0,0,Direction.W);
        
        int W=10;
        int H=10;
        BufferedImage img = new BufferedImage(M[0].length*W,M.length*H,BufferedImage.TYPE_INT_ARGB);
        Graphics g = img.getGraphics();
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, img.getWidth(), img.getHeight());
        g.setColor(Color.WHITE);
        for(int y=0;y<M.length;++y){
            for(int x=0;x<M[y].length;++x){
                if( M[y][x] ){
                    g.fillRect(x*W,y*H,W,H);
                }
            }
        }
        ImageIO.write(img,"png",new File("maze.png"));
    }
}